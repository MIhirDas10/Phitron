class Solution {
public:
    bool vis[105][105];
    
    int ans;
    vector<pair<int,int>> d = {{0,1},{0,-1},{-1,0},{1,0}};
    int n, m;
    bool valid(int ci, int cj){
        if(ci >= 0 && ci < n && cj >= 0 && cj < m){
            return true;
        }
        else return false;
    }
    void dfs(int si, int sj, vector<vector<int>>& grid){ // source i, source j
        vis[si][sj] = true;
        for(int i=0; i<4; i++){
            int ci = si + d[i].first;  // child i += sourcei + direction[i].first -> 0, 0, -1, 1
            int cj = sj + d[i].second; // child j += sourcej + direction[i].second-> 1, -1, -1, 1

            if(valid(ci, cj)){
                if(grid[ci][cj] == 0) ans++; // water
            }
            else{
                ans++;
            }
            // traversal logic
            if(valid(ci, cj) && !vis[ci][cj] && grid[ci][cj] == 1){
                dfs(ci, cj, grid);
            }
        }
    }

    int islandPerimeter(vector<vector<int>>& grid) {
        memset(vis, false, sizeof(vis));
        ans = 0;
        n = grid.size();    // row size
        m = grid[0].size(); // column size
        // grid.size() -> row size
        // for column size -> grid[i].size()
        for(int i=0; i<n; i++){ // row size
            for(int j=0; j<m; j++){ // column size
                if(!vis[i][j] && grid[i][j] == 1){
                    dfs(i,j,grid);
                }
            }
        }
        return ans;
    }
};